<?php 

class Bot {
    private $key = "8135316071:AAGEWaliqcivHVsv1xK3I3uutnP237oIvC8";
    private $apiUrl;
    private $taskStatus = [
        'new' => '–Ω–æ–≤–∞—è',
        'in_progress' => '–≤ —Ä–∞–±–æ—Ç–µ',
        'done' => '—Å–¥–µ–ª–∞–Ω–æ'
    ];
    private  $menuButton = [
    'inline_keyboard' => [
        [
            ['text' => 'COMMANDS', 'callback_data' => 'COMMANDS']
        ]
        ]
    ];
    private $commands = [
        'inline_keyboard' => [
        [
            ['text' => 'Create Task', 'callback_data' => "create"],
            ['text' => 'View Tasks', 'callback_data' => "list"]
        ]
        ]
    ];
    private $apiCalls = [
        'createUser' => ['url' => 'http://localhost/task-bot/public/api/user/create', 'method' => 'POST'],
        'create' => ['url' => 'http://localhost/task-bot/public/api/task/store', 'method' => 'POST'],
        'update' => ['url' => 'http://localhost/task-bot/public/api/task/update/{task_id}', 'method' => 'PUT'],
        'delete' => ['url' => 'http://localhost/task-bot/public/api/task/{task_id}', 'method' => "DELETE"],
        'list' => ['url' => 'http://localhost/task-bot/public/api/task/list/{telegram_id}', 'method' => 'GET'],
        'view' => ['url' => 'http://localhost/task-bot/public/api/task/{task_id}', 'method' => 'GET'],
    ];
    private $answers;

    public function __construct() {
        $this->apiUrl = "https://api.telegram.org/bot" . $this->key;
        $this->answers = [
            '/start' => ['text' => "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 'reply_markup' => $this->menuButton],
            '/ping' => ['text' => "Pong!"],
            'COMMANDS' => ['text' => "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 'reply_markup' => $this->commands],
            'create' => ['text' => "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –≤–ø–∏—à–∏—Ç–µ –≤ —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç –ø–æ –∑–∞–¥–∞–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É: create | <–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> | <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>"],
            'update' => ['text' => '–ß—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É, –≤–ø–∏—à–∏—Ç–µ –≤ —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç –ø–æ –∑–∞–¥–∞–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É: update | <–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> | <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> | —Å—Ç–∞—Ç—É—Å(–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ "–≤ —Ä–∞–±–æ—Ç–µ" –∏–ª–∏ "—Å–¥–µ–ª–∞–Ω–æ") | <id> id –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏ - '],
            'delete' => ['text' => "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"],
            'view' => ['text' => "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏"],
            'list' => ['text' => "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"],
        ];
    }

    public function update() {
        $response = file_get_contents($this->apiUrl . "/getUpdates");
        $data = json_decode($response, true);

        if (!isset($data['result'])) {
            echo "–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n";
            return;
        }

        $lastUpdateId = 0;

        foreach ($data['result'] as $update) {
            $updateId = $update['update_id'];
            $lastUpdateId = $updateId;

            $info = isset($update['callback_query']) ? $update['callback_query'] : $update['message'];

            $this->APICAll($this->apiCalls['createUser']['url'], $this->apiCalls['createUser']['method'], [
                'telegram_id' => $info['from']['id'],
                'first_name' => $info['from']['first_name'] ? $info['from']['first_name'] : null,
                'last_name' => $info['from']['last_name'] ? $info['from']['last_name'] : null
            ]);

            $data = isset($info['data']) ? $info['data'] : $info['text'];
            $params = explode('_', $data);
            if (array_key_exists($params[0], $this->answers)) {
                $handler = 'handle_' . $params[0];
                if(array_key_exists(1, $params)){
                    $info = array_merge(['parameter' => $params[1]], $info);
                }
                if (method_exists($this, $handler)) {
                    $this->$handler($info);
                } else {
                    $this->sendMessage(array_merge(['chat_id' => $info['from']['id']], $this->answers[$data]));
                }

            }
            else {
                if (str_starts_with($data, 'create |')) {
                    $parts = explode('|', $data);

                    if (count($parts) >= 3) {
                        $title = trim($parts[1]);
                        $description = trim($parts[2]);

                        $this->APICAll($this->apiCalls['create']['url'], $this->apiCalls['create']['method'], [
                            'telegram_id' => $info['from']['id'],
                            'title' => $title,
                            'description' => $description
                        ]);

                        $this->sendMessage(['chat_id' => $info['from']['id'], 'text' => "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"]);
                    } else {
                        $this->sendMessage(['chat_id' => $info['from']['id'], 'text' => "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫:\ncreate | –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ"]);
                    }

                }
                elseif(str_starts_with($data, 'update |')){
                    $parts = explode('|', $data);

                    if (count($parts) >= 5) {
                        $title = trim($parts[1]);
                        $description = trim($parts[2]);
                        $this->callAPI('update', ['task_id' => trim($parts[4])], [
                            'title' => $title,
                            'description' => $description,
                            'status' => array_search(trim($parts[3]), $this->taskStatus),                        
                        ]);
                        $this->sendMessage(['chat_id' => $info['from']['id'], 'text' => "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"]);
                    } else {
                        $this->sendMessage(['chat_id' => $info['from']['id'], 'text' => "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫:\update | –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ | id"]);
                    }

                } else {
                    $this->sendMessage(array_merge(['chat_id' => $info['from']['id']], ['text' => '–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: '.$data]));
                }
            }
            
        }
        
        file_get_contents($this->apiUrl . "/getUpdates?offset=" . ($lastUpdateId + 1));
    }

    private function sendMessage(array $params) {
        $ch = curl_init($this->apiUrl . "/sendMessage");
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ["Content-Type: application/json"]);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));
        curl_exec($ch);
        curl_close($ch);
    }

    private function callAPI(string $action, array $urlParams = [], array $data = [])
    {
        $api = $this->apiCalls[$action];
        $url = $api['url'];
        foreach ($urlParams as $key => $value) {
            $url = str_replace("{" . $key . "}", $value, $url);
        }
        echo $url;
        return $this->APICAll($url, $api['method'], $data);

    }

    private function APICAll(string $url, string $method, array $data = [])
    {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ["Content-Type: application/json"]);

        if($method == 'POST' || $method == 'PUT'){
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        }

        $response = curl_exec($ch);
        curl_close($ch);

        return $response;
    }

    private function handle_list($info) {
        $response = $this->callApi('list', ['telegram_id' => $info['from']['id']]);
        $tasks = json_decode($response, true);

        if (is_array($tasks) && !empty($tasks['data'])) {
            $message = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n";
            foreach ($tasks['data'] as $task) {
                $message .= "üìù " . $task['title'] . "\n";
            }
        
            $keyboard = ['inline_keyboard' => []];

                foreach ($tasks['data'] as $task) {
                    $keyboard['inline_keyboard'][] = [
                        ['text' => $task['title'], 'callback_data' => 'view_' . $task['id']]
                    ];
                }

                $this->sendMessage([
                    'chat_id' => $info['from']['id'],
                    'text' => $message,
                    'reply_markup' => json_encode($keyboard)
                ]);
        }
        else {
            $message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.";
            $this->sendMessage(['chat_id' => $info['from']['id'], 'text' => $message]);
        }
    }

    private function handle_view($info) {
        $response = $this->callApi('view', ['task_id' => $info['parameter']]);
        $task = json_decode($response, true);
        var_dump($task);
        if (is_array($task) && !empty($task['data'])) {
            $message = "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏:\n\n";
            $message .= "–ù–∞–∑–≤–∞–Ω–∏–µ: ".$task['data']['title']."\n";
            $message .= "–û–ø–∏—Å–∞–Ω–∏–µ: ".$task['data']['description']."\n";
            $message .= "–°—Ç–∞—Ç—É—Å: ".$this->taskStatus[$task['data']['status']]."\n";
            $message .= "–°–æ–∑–¥–∞–Ω–æ: ".$task['data']['created_at']."\n";
            $message .= "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ".$task['data']['updated_at']."\n";
        } else {
            $message = "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
        }

        $keyboard = ['inline_keyboard' => [
            [
                ['text' => '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'callback_data' => 'update_'.$task['data']['id']],
                ['text' => '–£–¥–∞–ª–∏—Ç—å', 'callback_data' => 'delete_'.$task['data']['id']],
            ]
        ]];

        $this->sendMessage([
            'chat_id' => $info['from']['id'],
            'text' => $message,
            'reply_markup' => json_encode($keyboard)
        ]);
    }

    private function handle_update($info) {
        $message = $this->answers['update']['text'].$info['parameter'];
        $this->sendMessage([
            'chat_id' => $info['from']['id'],
            'text' => $message,
        ]);
    }

    private function handle_delete($info) {
        $response = $this->callApi('delete', ['task_id' => $info['parameter']]);
        $task = json_decode($response, true);
        var_dump($task);
        if (is_array($task) && !empty($task['message'])) {
            $message = $task['message']."\n";
        } else {
            $message = "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
        }

        $this->sendMessage([
            'chat_id' => $info['from']['id'],
            'text' => $message,
        ]);
    }
}
